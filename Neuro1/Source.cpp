#include <iostream>

using namespace std;

const int strings = 100;
const int len = 15;
class Neuron {
    


public:

    int limit = 28;
    const int N5[15] = { 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1 };
    int weight[15] = { 5, 3, 2, 8, 3, 5, 4, 4, 3, 4, 3, 4, 5, 3, 1 };

    int main_selection[strings][len] = {
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
            {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1},
    };
    int num_weight = 0;
    bool CHECK_FLAG = false;
    bool NUM_FLAG = false;
    int last_weight[15] = { 0, 0, 0, 0, 0 ,0 ,0, 0, 0, 0, 0, 0, 0,0 };
    int temp[len];
    int count = 0;
    int temp_weight[len];

    void ADD(int num_reserve[], int weight[], const int len)
    {
        cout << endl << "Увеличение вектора Weight: " << endl;
        for (int i = 0; i < len; i++)
        {
            if (num_reserve[i] == 1)
            {
                weight[i]++;
            }
            cout << num_reserve[i] << " ";
        }
        cout << endl;
        for (int i = 0; i < len; i++)
        {
            cout << weight[i] << " ";
        }
        cout << endl;
    }


    void SUB(int num_reserve[], int weight[], const int len)
    {
        cout << endl << "Уменьшение вектора Weight: " << endl;
        for (int i = 0; i < len; i++)
        {
            if (num_reserve[i] == 1)
            {
                weight[i]--;
            }
            cout << num_reserve[i] << " ";
        }
        cout << endl;
        for (int i = 0; i < len; i++)
        {
            cout << weight[i] << " ";
        }
        cout << endl;
    }

    void AI_TRAIN()
    {
    check:
        for (int i = 0; i < strings; i++)
        {
            for (int j = 0; j < len; j++)
            {
                if (main_selection[i][j] == 1)
                {
                    num_weight += main_selection[i][j] * weight[j];

                }
                temp[j] = main_selection[i][j];
            }
            cout << i << " " << num_weight << endl;
            for (int k = 0; k < len; k++)
            {
                if (main_selection[i][k] == N5[k])
                {
                    count++;
                }
                else
                {
                    break;
                }
            }
            cout << "Count - " << count << endl;
            if (count == 15)
            {
                NUM_FLAG = true;
            }
            else
            {
                NUM_FLAG = false;
            }
            count = 0;
            if (num_weight > limit && NUM_FLAG == true)
            {
                CHECK_FLAG = true;
                cout << "Нейрон предварительно обучен" << endl << "Вес: " << num_weight << endl;
                for (int j = 0; j < 15; j++)
                {
                    cout << weight[j] << " ";
                    temp_weight[j] = weight[j];
                }


            }
            else if (num_weight > limit && NUM_FLAG == false)
            {
                SUB(temp, weight, len);

            }
            else if (num_weight <= limit && NUM_FLAG == true)
            {
                ADD(temp, weight, len);

            }
            num_weight = 0;
        }
        if (CHECK_FLAG == true)
        {
            cout << "Нейрон обучен" << " " << CHECK_FLAG << endl;
            cout << "Полученный вес: " << endl;
            for (int i = 0; i < len; i++)
            {
                cout << temp_weight[i] << " ";
            }
        }
        else
        {
            goto check;
        }
    }

    void WEIGHT_SUM()
    {
        
        int sum = 0;
        cout << endl;
        for (int j = 0; j < len; j++)
        {
            if (N5[j] == 1)
            {
                sum += N5[j] * weight[j];

            }
            
        }
        cout << "Полученный вес: " << sum;
    }
};



int main()
{
    setlocale(LC_ALL, "Russian");
    Neuron Neuro;
    Neuro.AI_TRAIN();
    Neuro.WEIGHT_SUM();
}